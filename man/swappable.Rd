% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/swappable.R
\name{swappable}
\alias{swappable}
\alias{swappableItem}
\alias{update_swappable}
\title{Swappable}
\usage{
swappable(inputId, ...)

swappableItem(inputId, ..., class = "")

update_swappable(id, order, session = shiny::getDefaultReactiveDomain())
}
\arguments{
\item{...}{Content, HTML tags.}

\item{class}{Any additional class to pass to parent div.}

\item{id, inputId}{Id of input.}

\item{order}{List of \code{inputId}s of \code{draggableItem} in desired
order.}

\item{session}{A value reactive domain.}
}
\description{
Create swappable elements.
\code{swappableItem}s within \code{swappable} can be swapper.
}
\examples{
library(shiny)

ui <- bigPage(
  sidebar = sidebar(
    "Menu",
    sidebarItem(
      "Home",
      "home"
    )
  ),
  bigTabs(
    bigTabItem(
      "home",
      div(
        class = "p-4",
        h1("Hello"),
        actionButton("reorder", "randomise order"),
        swappable(
          inputId = "swap",
          fluidRow(
            swappableItem(
              inputId = "s1",
              class = "col-6",
              div(
                class = "card",
                div(
                  class = "card-body",
                  plotOutput("plot1")
                )
              )
            ),
            swappableItem(
              inputId = "s2",
              class = "col-3",
              div(
                class = "card",
                div(
                  class = "card-body",
                  h3("Something")
                )
              )
            ),
            swappableItem(
              inputId = "s3",
              class = "col-3",
              div(
                class = "card",
                div(
                  class = "card-body",
                  h5("Something else")
                )
              )
            )
          )
        )
      )
    )
  )
)

server <- function(input, output) {
  output$plot1 <- renderPlot({
    plot(cars)
  })

  observeEvent(input$swap, {
    print(input$swap)
  })

  observeEvent(input$reorder, {
    order <- sample(
      c(
        "s1",
        "s2",
        "s3"
      )
    )

    update_swappable("swap", order)
  })
}

if(interactive())
 shinyApp(ui, server)

}
